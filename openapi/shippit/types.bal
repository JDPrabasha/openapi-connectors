// Copyright (c) 2021 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

# Represents a response to the Tracking API, which provides tracking info for a specific order.
# 
# If successful, will return a response object with tracking information. Otherwise, will return an error code at the top-level.
public type TrackingResponse record {
    # Order details returned by a tracking request
    TrackingResponseOrder? response?;
    *DataResponse;
};

# Represents an Order and related labelling information
public type Label record {
    # Data
    record {} data?;
    # Shippit internal ID of the generated label.
    int? id?;
    # Represents an Order that was created in Shippit
    OrderResponseOrder? 'order;
    # URL to a printable label for the Order.
    # This is a [pre-signed URL](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html), generated by the Shippit platform to provide access to a secured label. The pre-signed URL remains valid for 7 days. If you need to access this label after expiration, please make another request for a new URL to be issued.
    string? qualified_url;
};

public type WebhookrequestProducts record {
    int? quantity?;
    string? sku?;
    string? title?;
    string? product_line_id?;
};

# Represents a single product line item in an order.
public type Product record {
    # ```conditional``` -- Title or description of the product. Mandatory for international orders with specific couriers.
    string? title?;
    # The number of products packed; used in partial orders, or otherwise when the number of products in the parcel is less than the total in the order. If not present, set to product `quantity`.
    # 
    # If this is present, at least 1 item should have packed greater than `0`.
    # 
    # For international orders, all items should have packed greater than `0`.
    int? packed?;
    # ```conditional``` -- Stock Keeping Unit (SKU) code of the product, for stock keeping purposes. Mandatory on international orders with specific couriers.
    string? sku?;
    # Product line associated with product. Like SKU, this is also for stock keeping purposes, and can be used when SKU would not be enough (e.g. an order containing multiple lines with the same SKU)
    string? product_line_id?;
    # Two-letter country code (ISO 3166-1 Alpha-2) for the product's origin country. This is used in customs tracking for International shipments. Defaults to the home country of the Merchant.
    string? origin_country_code?;
    # Location of the product
    string? location?;
    # This is the DG code required when making dangerous goods declarations.
    # 
    # Before you can declare orders as having dangerous goods, you must first request for dangerous goods to enabled for your account. Contact Shippit Support or your account manager to have this enabled.
    # 
    # DG surcharges are often charged on the weight of the order, so it is recommended to split your order into multiple orders if your order contains either:
    # - both dangerous and non-dangerous goods, or
    # - more than one dangerous goods code
    string? dangerous_goods_code?;
    # Additional information related to dangerous goods being shipped
    string? dangerous_goods_text?;
    # Tariff code for International orders declarations
    string? tariff_code?;
    # The number of products ordered.
    int? quantity?;
    # Unit price of each product line item. Used in the packing slip and customs declarations.
    decimal? price?;
};

# Represents parameters that can be used to create an order in Shippit
public type OrderRequestOrder record {
    *Order;
};

# A specification of the queries to include in the quote.
public type QuoteRequestDetails record {
    # destination postcode for the quote
    string? dropoff_postcode;
    # destination state for the quote. **Required** when `dropoff_postcode` is unassigned or set to `AU`
    string? dropoff_state?;
    # The dropoff suburb
    string? dropoff_suburb;
    # An array of parcel specifications to be included in the quote.
    # 
    # Each item can be used to specify the qty, dimensions, and other information about the products to be shipped, and the parcel used to ship it.
    # 
    # At minimum, only the `qty` and `weight` fields are required. There is a maximum of 1000 parcels per quote request.
    Parcel[]? parcel_attributes;
    # delivery date for the order, required for `priority` orders
    string? order_date?;
    # If set to `true`, the system returns all quotes instead of cheapest/fastest quote. Defaults to false.
    boolean? return_all_quotes?;
    # ```conditional``` Declared value for customs when shipping international.
    # 
    # Mandatory for International orders.
    decimal? dutiable_amount?;
    # The destination country code for the quote in `ISO 3166 Alpha-2` format. If unassigned, defaults to the country code of the merchant's primary location, or otherwise 'AU'
    string? dropoff_country_code?;
};

# An event that tracks a change in `status` of a parcel's journey to fulfillment, with a `timestamp` of when the event happened.
# 
# This can be either be provided by the merchant as part of a **tracking order** request, or returned by a **track** request.
public type OrderRequestOrderTrackingHistory record {
    *TrackingHistory;
};

# Represents the customers details attached to the order.
public type UserAttributes record {
    # the customer's email address
    string? email;
    # the customer's first name. If ```last_name``` is not provided, then it is used as the customer's full name.
    string? first_name;
    # customer's last name
    string? last_name?;
    # Mobile number of the user / receiver.
    string? mobile?;
};

# Represents a response to the Book API, which returns the status of booking the order at each courier.
public type BookResponse record {
    # Array of booking statuses at each courier
    BookingStatus[]? response?;
    # Error code returned by Shippit
    # 
    # For the book response, there can be errors at the top-level request or for individual orders booked.
    # 
    # If the error occurs at the top-level request (order format, authorization), then this error code applies. Otherwise, the response will be successful and there will be individual errors applied in the body of each booked item.
    string? _error?;
    # Human-readable description of the top-level error encountered.
    string? error_description?;
    # Number of items in the response
    int? count?;
};

# For `tracking-only` orders, an object representing the tracking events provided in order creation.
# 
# The object returned is in the following format:
# 
# `{ "status_name": "ISO-8601-TIMESTAMP" }`.
public type OrderResponseTrackingHistory record {
};

# A Hash of error codes returned by tracking response.
# 
# Each error code is returned as a key, with an array of strings for each instance of the error.
public type TrackingErrorResponseDetails record {
    # Indicates an order that cannot be found.
    string[]? order_id?;
};

# Represents a merchant account
public type Merchant record {
    # Store name
    string? store_name?;
    # Company name
    string? company_name?;
    # Contact name
    string? contact_name?;
    # Contact phone
    string? contact_phone?;
    # Shipping cart method name
    string? shipping_cart_method_name?;
    # Preparation time
    int? preparation_time?;
    # Website URL
    string? website_url?;
    # Address
    string? address_1?;
    # Suburb
    string? suburb?;
    # State
    string? state?;
    # Postcode
    string? postcode?;
};

# The book API accepts an array of orders to book, this will initiate a booking with the respective carriers of the orders sent in. 
public type Book record {
};

# Response message for order create requests with `validate` flag set to true.
public type OrderValidationErrorResponse record {
    # List of error messages related to the postcode.
    string[]? delivery_postcode?;
    # List of error messages related to the suburb.
    string[]? delivery_suburb?;
    # Suggested address, if one is found.
    OrdervalidationerrorresponseSuggestedAddress? suggested_address?;
    # List of error messages related to the country code.
    string[]? delivery_country_code?;
    # List of error messages related to the state.
    string[]? delivery_state?;
    # List of error messages related to the provided product information. Typically appears in international orders.
    string[]? products?;
    *GenericErrorResponse;
};

# Represents an Order that was created in Shippit
public type OrderResponseOrder record {
    *Order;
};

# The book API accepts an array of orders to book, this will initiate a booking with the respective carriers of the orders sent in. 
public type BookRequest record {
    # an array of Shippit tracking numbers, corresponding to the orders which you would like to book.
    string[]? orders;
};

public type WebhookrequestStatusHistory record {
    string? status?;
    string? time?;
};

# Represents a response to an QuoteRequest, which shows either the generated Quote object or an error code with a description of the error.
public type QuoteResponse record {
    # The Quote returned by the carrier
    QuoteResult[]? response?;
    # Number of quote results returned.
    decimal? count?;
    *DataResponse;
};

# Describes the status of booking an order at a courier
public type BookingStatus record {
    # The courier where the booking was made
    string? courier?;
    # The Manifest ID of the booking
    string? manifest?;
    # A URL to a printable copy of the shipping manifest. This is a [pre-signed URL](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html), generated by the Shippit platform to provide access to a secured document. The pre-signed URL remains valid for 7 days. If you need to access this document after expiration, please make another request for a new URL to be issued.
    string? manifest_pdf?;
    # How many orders were included in this manifest.
    int? order_count?;
    # Whether or not the booking succeeded
    boolean? success?;
    # An array of order tracking numbers included in this status. Used to indicate which orders failed to manifest in the case where `success` = `false`.
    string[]? orders?;
    # Error code that applies to the individual bookings / orders referenced.
    string? _error?;
    # Human-readable error message applied to the individual bookings / orders referenced.
    string? error_description?;
};

public type WebhookRequest record {
    string? tracking_number?;
    string? tracking_url?;
    # Possible enumerations are `await_collection`, `awaiting_collection`, `awaiting_drop_off`, `cancelled`, `completed`, `parcel_completed`, `partially_completed`, `customs_awaiting_paym`, `customs_failed`, `customs_on_hold`, `damaged`, `delivery_attempted`, `delivery_failed`, `in_transit`, `insufficient_address`, `invalidated`, `lost`, `pickup_failed`, `processing`, `ready_for_pickup`, `return_booked`, `return_booking_failed`, `return_requested`, `returned_to_sender`, `untrackable`, `with_customs`, `with_driver`
    string? current_state?;
    string? retailer_order_number?;
    string? courier_name?;
    string? courier_job_id?;
    string? delivery_address?;
    string? delivery_suburb?;
    string? delivery_postcode?;
    string? delivery_state?;
    string? merchant_url?;
    WebhookrequestStatusHistory[]? status_history?;
    WebhookrequestProducts[]? products?;
};

# Represents a response to the Merchant request API, which shows either the generated Merchant object, or an error code with a description of the error.
public type MerchantResponse record {
    *DataResponse;
};

# Response message containing an error.
public type GenericErrorResponse record {
    # Error code returned by Shippit
    string? _error;
    # Human-readable description of error encountered.
    string? error_description?;
    *ErrorResponse;
};

# A response to an Order DELETE request
public type OrderDeleteResponse record {
    *OrderResponse;
};

# A Label or document in the Labels API, representing a printable document available on a public URL.
public type LabelDocument record {
    # URL to a printable PDF document.
    # This is a [pre-signed URL](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html), generated by the Shippit platform to provide access to a secured document. The pre-signed URL remains valid for 7 days. If you need to access this document after expiration, please make another request for a new URL to be issued.
    string? url?;
    # Page size
    string? page_size?;
    # File type of the label
    string? file_type?;
    # If you have ZPL for your account, printable ZPL data for the document.
    string? encoded_label?;
};

# Represents a response to the Label API, which provides an Order and related label information
public type LabelResponse record {
    *DataResponse;
};

# Represents a request for carrier Quotes from Shippit.
public type QuoteRequest record {
    # A specification of the queries to include in the quote.
    QuoteRequestDetails? quote;
};

# Represents an Order to be delivered by Shippit.
public type Order record {
    # delivery address for the order
    string? delivery_address;
    # delivery postcode for the order
    string? delivery_postcode;
    # delivery state for the order
    # Australian States valid options are ```NSW```, ```QLD```, ```ACT```, ```WA```, ```NT```, ```SA```, ```VIC```, ```TAS```
    string? delivery_state;
    # delivery suburb for the order
    string? delivery_suburb;
    # special delivery instructions for the order, limited to 55 characters
    string? delivery_instructions?;
    # ```conditional``` -- number of the person receiving the order, may be different than the user who purchased the order. Mandatory for International orders.
    string? receiver_contact_number?;
    # name of the person receiving the order if different than the user who purchased the order
    string? receiver_name?;
    # Merchant invoice number - the customer-facing sales order reference of the order. This would be what the recipient sees on the shipping label, packslip, customs declaration, receipt, etc.
    string? retailer_invoice?;
    # Two-letter ISO 639-1 language code of the recipient. Used to determine the language of tracking notifications and other communications. Defaults to ```EN```
    string? receiver_language_code?;
    # The date of the order for priority orders.
    # 
    # The recommended format is in ISO-8601 `YYYY-MM-DD`, although the Shippit is flexible enough to parse `YYYY/MM/DD`.
    # 
    # ```conditional``` -- specifies the date of the order for priority orders
    # 
    # ```delivery_date``` must be in the future.
    string? delivery_date?;
    # expected format: ```00:00-00:00```
    # 
    # ```conditional``` -- specifies the time window of the order, to be used when sending a priority order
    # 
    # ```delivery_window``` must be in the future.
    string? delivery_window?;
    # Used in **tracking_order**'s, the ID assigned by some carriers to the shipment / consignment.
    string? courier_job_id?;
    # The destination country code for the order in `ISO 3166 Alpha-2` format. If unassigned, defaults to the country code of the merchant's primary location, or otherwise 'AU'.
    string? delivery_country_code?;
    # Used in some countries to add additional district city information in addition to the `delivery_suburb` and `delivery_state`. Most of this time this is determined using the `delivery_suburb` and `delivery_postcode`.
    string? delivery_district_city?;
};

# An event that tracks a change in `status` of a parcel's journey to fulfillment, with a `timestamp` of when the event happened.
# 
# This can be either be provided by the merchant as part of a **tracking order** request, or returned by a **track** request.
public type TrackingResponseTrackingHistory record {
    *TrackingHistory;
};

public type OrderDeleteErrorResponse record {
    # The current state of the order should a DELETE request fail
    string? order_state;
    *GenericErrorResponse;
};

# Represents a parcel attached to an order.
public type OrderResponseOrderParcel record {
    *Parcel;
};

# Represents a request to submit an order to shippit.
public type OrderRequest record {
    # Represents parameters that can be used to create an order in Shippit
    OrderRequestOrder? 'order;
};

# Represents a parcel attached to an order.
# 
# ## parcels vs products
# How parcels relate to products is controlled by whether or not a **`product_attributes`** key is also defined. If a **`product_attributes`** is not defined, then the number of cartons is determined by the `Settings -> Pick & Pack -> Allocate each item in an order to a separate carton` option in Shippit, and the **`qty`** field will now specify either the number of parcels or products.
# 
# If a **`product_attributes`** key is specified in the request, then the products can be specified separately from the parcels. In which case, the **`qty`** field should not be present: each parcel attributes object represents a separate parcel, and the number of products is specified in the **`product_attributes`** key. There is a maximum of 1000 parcels per request.
public type Parcel record {
    # Weight of the parcel in kilos.
    decimal? weight?;
    # Depth of the parcel in metres
    decimal? depth?;
    # Length of the parcel in metres
    decimal? length?;
    # Width of the parcel in metres.
    decimal? width?;
    # Parcel number in the carrier system.
    # 
    # This is used when the order is a tracking order, to match the parcel number in a carrier against the parcel recorded in shippit.
    string? label_number?;
    # ```conditional``` -- The number of products specified by the entry.
    # 
    # There is a maximum of 1000 parcels per quote request.
    # 
    # Should not be present if a `product_attributes` key is present in the request.
    # 
    # If `Allocate each item in an order to a separate carton` is enabled in Shippit, a separate parcel is generated for each product listed.
    decimal? qty?;
};

# Error response returned in tracking requests
public type TrackingErrorResponse record {
    # A Hash of error codes returned by tracking response.
    # 
    # Each error code is returned as a key, with an array of strings for each instance of the error.
    TrackingErrorResponseDetails? _error;
    # Returns `false`
    boolean? success?;
    # Human-readable description of error encountered.
    string? error_description?;
    *ErrorResponse;
};

# Represents a response to an OrderRequest, which shows either the generated order object or an error code with a description of the error.
public type OrderResponse record {
    *DataResponse;
};

# Response message containing an error.
public type ErrorResponse record {
    # Error code returned by Shippit
    anydata? _error;
    # Human-readable response
    string? error_description?;
};

# Represents a Quote returned by a courier
public type QuoteResult record {
    # The name of the courier or service level giving the quote.
    string? courier_type?;
    # Error response, if any, received from the carrier(s) during quoting.
    string? _error?;
    # List of quotes returned for the service level or carrier.
    Quote[]? quotes?;
    # The service level associated with this quote or group of quotes.
    string? service_level?;
    # Whether or not this service level was able to obtain a valid quote from the carrier(s).
    boolean? success?;
};

# A quote returned by a carrier.
public type Quote record {
    # Estimated date of delivery for the order
    string? delivery_date?;
    # For priority orders, machine-readable estimated range of times when the delivery could take place.
    string? delivery_window?;
    # For priority orders, human-readable estimated range of times when the delivery could take place.
    string? delivery_window_desc?;
    # Amount quoted by the carrier.
    decimal? price?;
    # `optional` If returned inside a quote response for a service level (e.g. `standard`), the carrier returning the quote. May be omitted if a specific carrier was requested.
    string? courier_type?;
    # Estimated amount of time for the quote to arrive.
    string? estimated_transit_time?;
};

# Request-level error response for the Quote API.
public type QuoteErrorResponse record {
    # Returns `false`.
    boolean? success?;
    *GenericErrorResponse;
};

# Represents a parcel attached to an order.
# 
# ## parcels vs products
# How parcels relate to products is controlled by whether or not a **`product_attributes`** key is also defined. If a **`product_attributes`** is not defined, then the number of cartons is determined by the `Settings -> Pick & Pack -> Allocate each item in an order to a separate carton` option in Shippit, and the **`qty`** field will now specify either the number of parcels or products.
# 
# If a **`product_attributes`** key is specified in the request, then the products can be specified separately from the parcels. In which case, the **`qty`** field should not be present: each parcel attributes object represents a separate parcel, and the number of products is specified in the **`product_attributes`** key. There is a maximum of 1000 parcels per request.
public type OrderRequestOrderParcelAttributes record {
    *Parcel;
};

# Response message containing data.
public type DataResponse record {
};

# A keyword hash of documents generated for an order. Usually populated during the LABEL call.
public type OrderResponseOrderDocumentsHash record {
    # A Label or document in the Labels API, representing a printable document available on a public URL.
    LabelDocument? archive_awb?;
    # A Label or document in the Labels API, representing a printable document available on a public URL.
    LabelDocument? customs_invoice?;
    # A Label or document in the Labels API, representing a printable document available on a public URL.
    LabelDocument? dangerous_goods_declaration?;
    # A Label or document in the Labels API, representing a printable document available on a public URL.
    LabelDocument? packing_slip?;
    # A Label or document in the Labels API, representing a printable document available on a public URL.
    LabelDocument? shipping_label?;
};

# An event that tracks a change in `status` of a parcel's journey to fulfillment, with a `timestamp` of when the event happened.
# 
# This can be either be provided by the merchant as part of a **tracking order** request, or returned by a **track** request.
public type TrackingHistory record {
    # The status of the order
    string? status;
    # The date / time when the status change occurred.
    string? timestamp;
};

# Order details returned by a tracking request
public type TrackingResponseOrder record {
    # Tracking number of the Order
    string? tracking_number?;
    # URL presenting tracking info for the Order. This can be shown to the recipient to give them status updates on the Order.
    string? tracking_url?;
    # Whether or not this tracking request was successful - should always be `true` as tracking errors will be returned at the top-level response.
    boolean? success?;
    # Errors associated with the tracking request - should always be `null` as tracking errors will be returned at the top-level response.
    string? _error?;
    # A list of historical tracking statuses for the Order. This will at minimum list the order status, along with the date and time when it changed, and who was responsible for the status change.
    TrackingResponseTrackingHistory[]? track?;
};

# Represents a request to update a merchant
public type MerchantRequest record {
    # Represents a merchant account
    Merchant? merchant;
};

# Suggested address, if one is found.
public type OrdervalidationerrorresponseSuggestedAddress record {
    # Suburb
    string? suburb?;
    # Postcode
    string? postcode?;
    # State
    string? state?;
    # Country code
    string? country_code?;
};
